# %%
import torch
from torch import nn 
torch.manual_seed(1)

# %%
# set w, b
w = torch.tensor([[2.0], [3.0]], requires_grad=True)
b = torch.tensor([[1.0]], requires_grad=True)

# %%
def forward(x):
    yhat = torch.mm(x, w) + b
    return yhat

# %%
# Calculate yhat

x = torch.tensor([[1.0, 2.0]])
yhat = forward(x)
print("The result: ", yhat)

# %%
X = torch.tensor([[1.0, 1.0], [1.0, 2.0], [1.0, 3.0]])

yhat = forward(X)
print(yhat)

# %%
# Custom modules

class linear_regression(nn.Module):
    def __init__(self, input_size, output_size):
        super(linear_regression, self).__init__()
        self.linear = nn.Linear(input_size, output_size)
        
    def forward(self, x):
        yhat = self.linear(x)
        return yhat

# %%
model = linear_regression(2, 2)

# %%
yhat = model(x)
print(yhat)

# %%
X = torch.tensor([[11.0, 12.0, 13, 14], [11, 12, 13, 14]])
model = linear_regression(4, 1)
yhat = model(X)
print(yhat)

# %%



