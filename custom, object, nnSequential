# %%
import torch 
import torch.nn as nn
import matplotlib.pyplot as plt


# %%
torch.manual_seed(2)

# %%
sig = nn.Sigmoid()

z = torch.arange(-100, 100, 0.1).view(-1, 1)
yhat = sig(z)

print(yhat)

# %%
plt.plot(z.numpy(), yhat.numpy())

# %%
## Build a Logistic Regression with nn.Sequential


# %%
model = nn.Sequential(nn.Linear(1, 1), nn.Sigmoid())
x = torch.tensor([[1.0]])
yhat = model(x)
print(yhat)

# %%
print(list(model.parameters()))
print(model.state_dict())

# %%
# Build Custom Modules


# %%
class logistic_regression(nn.Module):
    def __init__(self, n_inputs):
        super(logistic_regression, self).__init__()
        self.linear = nn.Linear(n_inputs, 1)
        
    def forward(self, x):
        yhat = torch.sigmoid(self.linear(x))
        return yhat

# %%
x = torch.tensor([1.0])
model = logistic_regression(1)


# %%
yhat = model(x)
print(yhat)

# %%
# With 2 inputs

# %%
x = torch.tensor([1.0, 2.0])
model = logistic_regression(2)
yhat = model(x)
print(yhat)

# %%
X = torch.tensor([-10.0])
model =  nn.Sequential(nn.Linear(1, 1), nn.Sigmoid())
yhat = model(X)
print(yhat)

# %%
X = torch.tensor([-10.0])

class logistic_regression(nn.Module):
    def __init__(self, n_inputs):
        super(logistic_regression, self).__init__()
        self.linear = nn.Linear(n_inputs, 1)
        
    def forward(self, x):
        yhat = torch.sigmoid(self.linear(x))
        return yhat
    


# %%
model = logistic_regression(1)
yhat = model(X)
print(yhat)

# %%
# Create sigmoid object

# %%
X = torch.tensor([-10.0])

sig = nn.Sigmoid()
yhat = sig(X)
print(yhat)

# %%



